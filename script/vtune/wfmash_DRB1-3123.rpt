Elapsed Time: 0.610s
    IPC: 1.352
    SP GFLOPS: 0.000
    DP GFLOPS: 0.003
    x87 GFLOPS: 0.006
    Average CPU Frequency: 2.030 GHz
Logical Core Utilization: 20.4% (6.516 out of 32)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization. Consider improving physical core utilization as the first step
 | and then look at opportunities to utilize logical cores, which in some cases
 | can improve processor throughput and overall performance of multi-threaded
 | applications.
 |
    Physical Core Utilization: 20.3% (6.505 out of 32)
     | The metric value is low, which may signal a poor physical CPU cores
     | utilization caused by:
     |     - load imbalance
     |     - threading runtime overhead
     |     - contended synchronization
     |     - thread/process underutilization
     |     - incorrect affinity that utilizes logical cores instead of physical
     |       cores
     | Run the HPC Performance Characterization analysis to estimate the
     | efficiency of MPI and OpenMP parallelism or run the Locks and Waits
     | analysis to identify parallel bottlenecks for other parallel runtimes.
     |
Microarchitecture Usage: 30.8% of Pipeline Slots
 | You code efficiency on this platform is too low.
 | 
 | Possible cause: memory stalls, instruction starvation, branch misprediction
 | or long latency instructions.
 | 
 | Next steps: Run Microarchitecture Exploration analysis to identify the cause
 | of the low microarchitecture usage efficiency.
 |
    Retiring: 30.8% of Pipeline Slots
    Front-End Bound: 21.2% of Pipeline Slots
     | Issue: A significant portion of Pipeline Slots is remaining empty due to
     | issues in the Front-End.
     | 
     | Tips:  Make sure the code working size is not too large, the code layout
     | does not require too many memory accesses per cycle to get enough
     | instructions for filling four pipeline slots, or check for microcode
     | assists.
     |
    Bad Speculation: 8.2% of Pipeline Slots
    Back-End Bound: 39.8% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 8.3% of Pipeline Slots
            L1 Bound: 7.1% of Clockticks
                FB Full: 1.3% of Clockticks
            L2 Bound: 0.5% of Clockticks
            L3 Bound: 0.9% of Clockticks
                L3 Latency: 1.4% of Clockticks
            DRAM Bound: 0.5% of Clockticks
                Memory Bandwidth: 0.3% of Clockticks
                Memory Latency: 1.9% of Clockticks
                    Local DRAM: 0.2% of Clockticks
                    Remote DRAM: 0.1% of Clockticks
                    Remote Cache: 0.6% of Clockticks
            Store Bound: 2.9% of Clockticks
        Core Bound: 31.5% of Pipeline Slots
         | This metric represents how much Core non-memory issues were of a
         | bottleneck. Shortage in hardware compute resources, or dependencies
         | software's instructions are both categorized under Core Bound. Hence
         | it may indicate the machine ran out of an OOO resources, certain
         | execution units are overloaded or dependencies in program's data- or
         | instruction- flow are limiting the performance (e.g. FP-chained long-
         | latency arithmetic operations).
         |
Memory Bound: 8.3% of Pipeline Slots
    Cache Bound: 8.5% of Clockticks
    DRAM Bound: 0.5% of Clockticks
        Average DRAM Bandwidth, GB/s: 0.000
    NUMA: % of Remote Accesses: 13.8%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
                512-bit: 0.0% from SP FP
            Scalar: 100.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
                512-bit: 0.0% from DP FP
            Scalar: 100.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 99.9% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.002
    FP Arith/Mem Wr Instr. Ratio: 0.003
Collection and Platform Info
    Application Command Line: bash "-c" "wfmash         /work/shared/users/phd/jl4257/Course/CS6230/characterize_pggb/dataset/DRB1-3123/DRB1-3123.fa.gz         /work/shared/users/phd/jl4257/Course/CS6230/characterize_pggb/dataset/DRB1-3123/DRB1-3123.fa.gz         --threads 32         -n 11 -s 5000 -p 90  -X  -l 25000 -k 19 -H 0.001 > /work/shared/users/phd/jl4257/Course/CS6230/characterize_pggb/dataset/DRB1-3123/DRB1-3123.fa.gz.paf" 
    Operating System: 3.10.0-1160.76.1.el7.x86_64 \S Kernel \r on an \m 
    Computer Name: zhang-24.ece.cornell.edu
    Result Size: 3.8 MB 
    Collection start time: 00:47:15 10/12/2023 UTC
    Collection stop time: 00:47:16 10/12/2023 UTC
    Collector Type: Driverless Perf per-process counting
    CPU
        Name: Intel(R) Xeon(R) Processor code named Cascadelake
        Frequency: 3.392 GHz
        Logical CPU Count: 32
        Max DRAM Single-Package Bandwidth: 83.000 GB/s
        LLC size: 37.5 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

Recommendations:
    Hotspots: Start with Hotspots analysis to understand the efficiency of your algorithm.
     | Use Hotspots analysis to identify the most time consuming functions.
     | Drill down to see the time spent on every line of code.
    Threading: There is poor utilization of logical CPU cores (20.4%) in your application.
     |  Use Threading to explore more opportunities to increase parallelism in
     | your application.
    Microarchitecture Exploration: There is low microarchitecture usage (30.8%) of available hardware resources.
     | Run Microarchitecture Exploration analysis to analyze CPU
     | microarchitecture bottlenecks that can affect application performance.

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
